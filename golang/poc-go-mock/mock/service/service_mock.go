// Code generated by MockGen. DO NOT EDIT.
// Source: poc-go-mock/service (interfaces: IService)
//
// Generated by this command:
//
//	mockgen -destination=./mock/service/service_mock.go -package=mock_service poc-go-mock/service IService
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "poc-go-mock/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
	isgomock struct{}
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// Call1 mocks base method.
func (m *MockIService) Call1(param string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call1", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call1 indicates an expected call of Call1.
func (mr *MockIServiceMockRecorder) Call1(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call1", reflect.TypeOf((*MockIService)(nil).Call1), param)
}

// Call2 mocks base method.
func (m *MockIService) Call2(param *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call2", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call2 indicates an expected call of Call2.
func (mr *MockIServiceMockRecorder) Call2(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call2", reflect.TypeOf((*MockIService)(nil).Call2), param)
}

// Call3 mocks base method.
func (m *MockIService) Call3(param *model.StructModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call3", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call3 indicates an expected call of Call3.
func (mr *MockIServiceMockRecorder) Call3(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call3", reflect.TypeOf((*MockIService)(nil).Call3), param)
}

// Call4 mocks base method.
func (m *MockIService) Call4(param model.StructModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call4", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call4 indicates an expected call of Call4.
func (mr *MockIServiceMockRecorder) Call4(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call4", reflect.TypeOf((*MockIService)(nil).Call4), param)
}
